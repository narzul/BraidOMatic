/*

    /////////////////////////////////////
    void RotateOne(){
        rotation++;
        if(rotation>7) rotation=0;
    }

    //////////////////////////////////////////
    void DrawCurrentSelectedModule() {  //highlights the module that is selected to build upon/////////////////////////////////////////////////////////////////////////
        driver drLook = (driver) driverList.get(selectedModule); //later get a specific clicked one...
        stroke(0, 122, 0);
        ellipse(drLook.posx, drLook.posy, driverSize, driverSize);
    }





    void ListSwitches (){////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        for (int s=0; s<swiList.size(); s++) {
            swi swiLook = (swi) swiList.get(s);
            println("swi:"+s+" amod(RL): "+swiLook.amoR+","+swiLook.amoL+" bmod(RL): "+swiLook.bmoR+","+swiLook.bmoL+" pos: "+swiLook.pos+"");

        }
    }
    void RecreateSwitches(){
        swiList.clear();
        println("CLEARING: "+swiList.size());
        for (int d=0; d<driverList.size(); d++) {
            FindNeighbourModules(d);}

    }
    void DrawSwitches () {
        for (int s=0; s<swiList.size (); s++) {
            swi swiLook = (swi) swiList.get(s);
            noFill();
            if (swiLook.rl) stroke(100, 200, 100);
            else stroke(200, 100, 100);

            strokeWeight(driverSize/5);
            point(swiLook.posx, swiLook.posy); //the white driver main circle
            stroke(0);
            fill(0);
            text(s,swiLook.posx-5,swiLook.posy+5);

        }
    }


    	public void DrawDrivers(ArrayList driverList, int driverSize, int rotation) {
    		//drawing the drivers as white ellipses
    		print(driverList.size());
    	}
